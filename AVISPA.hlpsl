%% PROTOCOL: Project Postoffice Package
%% S: Post Office Central Server
%% P: Post Office
%% X: User/Smartphone
%% ID: id number of the package
%% N: nonce code sent to the user to verify he is the recipient of the package
%% Np and Ns are two other nonces used for authentication between P and S
%% 0. s -> x : {ID,P}PKx
%% 0. s -> p : {X, Np}PKp
%% 1. p -> s : {Ns, Np}PKs
%% 2. x -> p : {ID,X}Kxp
%% 3. p -> s : {ID,X,P,Np}PKs
%% 4. s -> x : {N}PKx
%% 5. x -> p : {N,X}Kxp
%% 6. p -> s : {N,X,P,Np}PKs
%% 7. s -> p : {ID,Ns}PKp
%% 8. p -> x : {ID}Kxp
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% définition du rôle S, initiant le protocole
role server (S, P, X: agent,             
             PKs, PKx: public_key,
             KeyMapApprovedPostOffices: (agent.public_key) set,      
             SND, RCV: channel(dy)) 

played_by S def=

   local State: nat, 
         N,  ID, NP, NS: text,
         PKp : public_key

  init State:=0

  transition  
   
    0.  State=0 /\ RCV(start) /\ in(P.PKp', KeyMapApprovedPostOffices) =|> 
        State':=1 /\ ID':=new() /\ NP' := new() /\ SND({ID'.P}_PKx) /\SND({X.NP'}_PKp')/\ secret(ID',secret_id,{S,P,X}) /\ secret(NP',secret_np,{S,P}) /\ witness(S,X,server_user_id,ID')
        
    1.  State=1 /\ RCV({NS'.NP}_PKs) =|> 
        State':= 2

    4.  State=2 /\ RCV({ID.X.P.NP}_PKs) =|> 
        State':=3 /\ N':=new() /\ SND({N'}_PKx) /\ secret(N',secret_N,{P,X,S}) /\ witness(S,X,server_user_n,N') /\ request(S,P,server_officer_n,NP)
        
    7.  State=3 /\ RCV({{N.X.P.NP}_inv(PKp)}_PKs) =|> 
        State':=4 /\ SND({ID.NS}_PKp) /\ request(S,P,server_officer_n,NP) /\ witness(S,P,officer_server_n,NS)

end role

%%NOTE: the ' in Na' means: "assign to Na this value"

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% role user

role user (S,X: agent,             
            PKs, PKx: public_key,
            Kxp : symmetric_key,
            SND, RCV: channel(dy)) 
            
played_by X def=

  local State: nat, 
  ID, N: text,
  P : agent

  init State:=0

  transition  
   
    2.  State=0 /\ RCV({ID'.P'}_PKx) =|> 
	    State':=1 /\ SND({ID'.X}_Kxp)

    5.  State=1 /\ RCV({N'}_PKx) =|> 
	    State':=2 /\ SND({N'.X}_Kxp)
        
    8.  State=2 /\ RCV({ID}_Kxp) =|>
        State':=3 /\ request(S,X,server_user_n,N) /\ request(S,X,server_user_id,ID)

end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% role post office

role officer (S,P: agent,             
            PKs, PKp: public_key,
            Kxp : symmetric_key,
            SND, RCV: channel(dy)) 
played_by P def=

  local State: nat, 
  ID, N, NP, NS: text,
  X : agent

  init State:=0

  transition  
  
    1.  State=0 /\ RCV({X'.NP'}_PKp) =|> 
	    State':=1 /\ NS':=new() /\ SND({NS'.NP}_PKs)
   
    3.  State=1 /\ RCV({ID'.X}_Kxp) =|> 
	    State':=2 /\  SND({ID'.X.P.NP}_PKs) /\ witness(S,P,server_officer_n,NP)

    6.  State=2 /\ RCV({N'.X}_Kxp) =|> 
	    State':=3 /\ SND({N'.X.P.NP}_PKs) /\ witness(S,P,server_officer_n,N'.X.P)

    8.  State=3 /\ RCV({ID.NS}_PKp) =|>
        State':=4 /\ SND({ID}_Kxp) /\ request(S,P,officer_server_n,NS)
    
end role
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% définition du rôle caractérisant une session
role session(S, P, X: agent,
             PKs, PKp, PKx: public_key,
             Kxp: symmetric_key,
             KeyMapApprovedPostOffices: (agent.public_key) set
            ) def=

  local SND, RCV: channel(dy)

  composition 

	server(S,P,X,PKs,PKx,KeyMapApprovedPostOffices,SND,RCV)
     /\ user(S,X,PKs,PKx,Kxp,SND,RCV)
     /\ officer(S,P,PKs,PKp,Kxp,SND,RCV)

end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% définition du rôle caractérisant le scenario à exécuter
role environment() def=

    local KeyMapApprovedPostOffices: (agent.public_key) set

    const s, p, x, i: agent,
          pks, pkp, pkx, pki: public_key,
          kxp, kip, kxi: symmetric_key,
          idx, idi:text,        
          secret_id, secret_N, secret_np, server_user_id, server_user_n,server_officer_n,officer_server_n: protocol_id
    
    init KeyMapApprovedPostOffices:={p.pkp}     

    intruder_knowledge = {s, p, x, pks, pkp, pkx, pki, inv(pki)}

    composition    

      session(s, p, x, pks, pkp, pkx, kxp, KeyMapApprovedPostOffices)
    /\session(s, p, i, pks, pkp, pki, kip, KeyMapApprovedPostOffices)
    /\session(s, i, x, pks, pki, pkx, kxi, KeyMapApprovedPostOffices)

%i denotes the intruder

end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% pour l'instant, pas de section goal ici (donc pas de propriété à vérifier)

goal
  secrecy_of secret_id
  secrecy_of secret_N
  secrecy_of secret_np
  authentication_on server_user_n
  authentication_on server_user_id
  authentication_on server_officer_n
  authentication_on officer_server_n
end goal
%the option --split for hlps12if.exe outputs multiple IF files, one for each security property to check

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% lancement du rôle principal
environment()
