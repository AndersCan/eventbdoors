The goal of this project was to specify the behavior of an access control by using the theorem proofer Rodin. Our specification is currently composed of three machines and their corresponding contexts :

- DoorMachine1 and the context DoorContext ;
- DoorMachine100 and its context UserContext ;
- DoorMachine100 and its context SensorContext.

1. DoorMachine1

The first model of our specification simply defines the motions of the door in a very abstract way : it can open to the a side with a given angle and the same to the b side ; otherwise the door is close. There is absolutely no access control at this level.

At this level, the motions of the door are specified by the two variables DoorStatus and DoorAngle : the first one describes the status of the door, if it is closed, opening to a, opened to a, closing from a or the same status on the b side. DoorAngle completes this notion by adding an angle to this motions. 

The transitions between different values of DoorAngle and DoorStatus are specified by the following list of events :

- StartOpening\_A : when the door is closed, start to open to a side ;
- StartOpening\_B : when the door is closed, start to open to b side ;
- Opening\_A : when the door is opening to a side, decrease its angle by a given speed ;
- Opening\_B : when the door is opening to b side, increase its angle by the same speed ;
- Opened\_A : whenever the angle becomes equals to 0, stop to open to a side ;
- Opened\_B : whenever the angle becomes equals to 180, stop to open to b side ;
- StartClosing\_A : when the door is opened to a, start to close it ;
- StartClosing\_B : when the door is opened to b, start to close it ;
- Closing\_A : when the door is closing from a side, increase its angle by its speed ;
- Closing\_B : when the door is closing from b side, decrease its angle by its speed ;
- Closed : model the fact that the door is closed.

This specification must belong to the following list of invariants :

- inv. 1 : DoorAngle is a natural number ;
- inv. 2 DoorAngle is element of [0;180] ;
- inv. 3 : DoorStatus is element of DoorStatus set ;
- inv. 4 : whenever the door is closed, its angle is equals to 90 ;
- inv. 5 : whenever the door is opened to a side, its angle is equals to 0 ;
- inv. 6 : whenever the door is opened to b side, its angle is equals to 180 ;
- inv. 7 : whenever the door is opening to a side, its angle is between 0 and 90 degrees ;
- inv. 8 : whenever the door is opening to b side, its angle is between 90 and 180 degrees.

2. DoorMachine10 :

This model refines DoorMachine1 and introduce a first level of control on the users : each user is either authorized or not authorized to open the door. According to the authorization level of the user who tries to open the door, the control system will accept to open it or not.

The variables are the same as in the previous model. The set of users is described as a partition of two sets : those who are authorized and those who are not authorized to open the door.

The following events of the previous level have to be updated to enable the new behavior of the door :

- StartOpening\_a : this event extends StartOpening\_A of the previous model. It takes one user as argument. Whenever the door is closed and the user is element of the set of users, this event specifies that the door will start to open to a side ;

- StartOpening\_b : this event extends StartOpening\_B of the previous model. It takes one user as argument. Whenever the door is closed and the user is element of the set of authorized users, this event specifies that the door will start to open to b side.

The other events are the same as at the previous level. The only invariant that refines the behavior of the previous level is that the set of users is partitioned between the set of authorized users and the set of not authorized users.

3. DoorMachine100 :

This model is the last refinement of our specification : it add the sensors controlling if someone is stepping on one side of the door.

To complete the definition of the previous model, DorrMachine100 defines two new variables : sensor_a that controls the fact that someone is stepping on a side of the door and sensor_b that controls if someone steps on b side of the door.

The behavior of the door is specified at this level by the following events :

- Opening_A : this event is the same at the previous level except the fact that the sensor a must be disabled ;
- Opening_B : this event is the same at the previous level except the fact that the sensor B must be disabled ;
- StartClosing_A : this event refines the same event at the previous level. to start to close, the door must be open to a side and the sensor_a must be disabled ;
- StartClosing_B : this event refines the same event at the previous level. to start to close, the door must be open to b side and the sensor_b must be disabled ;
- STEPON_A : when the sensor a is off, it can be enabled if someone steps on a side.
- STEPON_B : when the sensor b is off, it can be enabled if someone steps on b side.
- STEPOFF_A : when the sensor a is on, it can be disabled if the person stepping on a side leaves its position.
- STEPOFF_B : when the sensor b is on, it can be disabled if the person stepping on b side leaves its position.

The other events do not change. Finally, the behavior of the door is constrained at this level by the invariants that specify that sensor_a and sensor_b are sub-sets of the sensor type defined on the corresponding context.